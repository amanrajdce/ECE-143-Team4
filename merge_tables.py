"""
This script merges various tables generated by our scrapper.
"""
import pandas as pd
import numpy as np
import string
import matplotlib.pyplot as plt
import os

review_fold = "./Scraper/ReviewScraper"
salary_fold = "./Scraper/SalaryScraper"


def check_for_full_time(row):
    """
    Check if given row contains full-time salary statistics

    row: pandas.core.series.Series
    """
    x, y = row['job_title'], row['mean_pay']
    keywords = ["Hourly", "Hour", "Intern", "/hr", "Internship"]
    for k in keywords:
        if k in x or k in y:
            return False

    return True


def generate_category_for_job(job):
    """
    Generate job category for given job title.

    job: str
        name of job title
    """
    assert(isinstance(job, str))

    job = job.lower()
    x = job.split(" ")
    sales = ["sales"]
    marketing = ["marketing", "market"]
    it = ["it"]
    enginer = ["software", "engineer", "engineering", "ui",
                "scientist", "developer", "sde1", "sde2"]
    manager = ["manager"]

    if any(keyw in x for keyw in sales): # 686
        return "sales"
    if any(keyw in x for keyw in marketing): # 289
        return "marketing"
    if any(keyw in x for keyw in it): # 136
        return "it"
    if any(keyw in x for keyw in enginer) or "member of technical staff" in job:
        return "engineering"
    if any(keyw in x for keyw in manager):
        return "managerial"

    return "others"


def merged_reviews_table(review_fold):
    """
    This function merges all the review tables into a single .csv file

    review_fold: str
        path to folder containing review tables
    """
    print("Processing review tables...")
    assert(isinstance(review_fold, str))
    assert(len(review_fold) > 0)
    assert(os.path.exists(review_fold))

    tables_fold = os.path.join(review_fold, "tables")
    files = os.listdir(tables_fold)
    files = [f for f in files if ".csv" in f]

    tables = []
    for f in files:
        tab = pd.read_csv(os.path.join(tables_fold, f))
        comp = f.split("_")[0].lower()
        tab['company'] = [comp] * len(tab)
        tables.append(tab)

    # merge tables
    merge_table = pd.concat(tables, ignore_index=True, sort=False)
    merge_table = merge_table.drop_duplicates() # drop duplicates
    merge_table = merge_table.reset_index(drop=True)
    print("Total samples in merged table of reviewes: {}".format(len(merge_table)))
    merge_table.to_csv(
        os.path.join(review_fold, "merged_reviews_table.csv"), index=False
    )


def merge_salary_table(salary_fold):
    """
    This function merges all the salary tables into a single table
    and genrates salary table for full-time and intern roles and save
    to disk as .csv files. It also generate job category for each role
    based on some heuristics.

    salary_fold: str
        path to folder containing salary tables
    """
    assert(isinstance(salary_fold, str))
    assert(len(salary_fold) > 0)
    assert(os.path.exists(salary_fold))
    print("Processing salary tables...")

    tables_fold = os.path.join(salary_fold,  "tables")
    files = os.listdir(tables_fold)
    files = [f for f in files if ".csv" in f]

    tables = []
    for f in files:
        tab = pd.read_csv(os.path.join(tables_fold, f))
        comp = f.split("-")[0].lower()
        tab['company'] = [comp] * len(tab)
        tables.append(tab)

    # merge tables
    merge_table = pd.concat(tables, ignore_index=True, sort=False)
    merge_table = merge_table.drop_duplicates()    # drop duplicates
    # clean scrapped data
    merge_table = merge_table[merge_table["jobTitle"] != "California"]
    merge_table = merge_table[merge_table["jobTitle"] != "CA"]
    merge_table = merge_table.reset_index(drop=True)

    merge_table.rename(
        columns={"jobTitle": "job_title", "meanPay": "mean_pay", "Range": "salary_range"},
        inplace=True
    )
    print("Total samples in merged table for salary: {}".
            format(len(merge_table)))

    merge_table['full_time'] = \
    merge_table.apply(check_for_full_time, axis=1)

    merge_table_intern = merge_table[~merge_table['full_time']]
    merge_table = merge_table[merge_table['full_time']]

    merge_table = merge_table.reset_index(drop=True)
    merge_table_intern = merge_table_intern.reset_index(drop=True)

    merge_table.drop(['full_time'], axis=1, inplace=True)
    merge_table_intern.drop(['full_time'], axis=1, inplace=True)

    print("Total samples in merged table for full-time: {}".
            format(len(merge_table)))
    print("Total samples in merged table for intern: {}".
            format(len(merge_table_intern)))

    full_time_fname = "fulltime_merged_salaries_company_table.csv"
    intern_fname = "intern_merged_salaries_company_table.csv"

    merge_table['category'] = \
    merge_table['job_title'].apply(generate_category_for_job)
    merge_table_intern["category"] = \
    merge_table_intern["job_title"].apply(generate_category_for_job)

    merge_table.to_csv(
        os.path.join(salary_fold, full_time_fname), index=False
    )
    merge_table_intern.to_csv(
        os.path.join(salary_fold, intern_fname), index=False
    )


if __name__ == "__main__":
    merged_reviews_table(review_fold)
    merge_salary_table(salary_fold)
